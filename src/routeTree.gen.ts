/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SpectateRouteImport } from './routes/spectate'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ReplayRouteImport } from './routes/replay'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as MatchHistoryRouteImport } from './routes/match-history'
import { Route as LeaderboardRouteImport } from './routes/leaderboard'
import { Route as GameRouteImport } from './routes/game'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AiGameRouteImport } from './routes/ai-game'
import { Route as AchievementsRouteImport } from './routes/achievements'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SpectateRoute = SpectateRouteImport.update({
  id: '/spectate',
  path: '/spectate',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReplayRoute = ReplayRouteImport.update({
  id: '/replay',
  path: '/replay',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const MatchHistoryRoute = MatchHistoryRouteImport.update({
  id: '/match-history',
  path: '/match-history',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardRoute = LeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRouteImport,
} as any)
const GameRoute = GameRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AiGameRoute = AiGameRouteImport.update({
  id: '/ai-game',
  path: '/ai-game',
  getParentRoute: () => rootRouteImport,
} as any)
const AchievementsRoute = AchievementsRouteImport.update({
  id: '/achievements',
  path: '/achievements',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/achievements': typeof AchievementsRoute
  '/ai-game': typeof AiGameRoute
  '/auth': typeof AuthRoute
  '/game': typeof GameRoute
  '/leaderboard': typeof LeaderboardRoute
  '/match-history': typeof MatchHistoryRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/profile': typeof ProfileRoute
  '/replay': typeof ReplayRoute
  '/settings': typeof SettingsRoute
  '/spectate': typeof SpectateRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/achievements': typeof AchievementsRoute
  '/ai-game': typeof AiGameRoute
  '/auth': typeof AuthRoute
  '/game': typeof GameRoute
  '/leaderboard': typeof LeaderboardRoute
  '/match-history': typeof MatchHistoryRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/profile': typeof ProfileRoute
  '/replay': typeof ReplayRoute
  '/settings': typeof SettingsRoute
  '/spectate': typeof SpectateRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/achievements': typeof AchievementsRoute
  '/ai-game': typeof AiGameRoute
  '/auth': typeof AuthRoute
  '/game': typeof GameRoute
  '/leaderboard': typeof LeaderboardRoute
  '/match-history': typeof MatchHistoryRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/profile': typeof ProfileRoute
  '/replay': typeof ReplayRoute
  '/settings': typeof SettingsRoute
  '/spectate': typeof SpectateRoute
  '/terms': typeof TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/achievements'
    | '/ai-game'
    | '/auth'
    | '/game'
    | '/leaderboard'
    | '/match-history'
    | '/pricing'
    | '/privacy'
    | '/profile'
    | '/replay'
    | '/settings'
    | '/spectate'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/achievements'
    | '/ai-game'
    | '/auth'
    | '/game'
    | '/leaderboard'
    | '/match-history'
    | '/pricing'
    | '/privacy'
    | '/profile'
    | '/replay'
    | '/settings'
    | '/spectate'
    | '/terms'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/achievements'
    | '/ai-game'
    | '/auth'
    | '/game'
    | '/leaderboard'
    | '/match-history'
    | '/pricing'
    | '/privacy'
    | '/profile'
    | '/replay'
    | '/settings'
    | '/spectate'
    | '/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  AchievementsRoute: typeof AchievementsRoute
  AiGameRoute: typeof AiGameRoute
  AuthRoute: typeof AuthRoute
  GameRoute: typeof GameRoute
  LeaderboardRoute: typeof LeaderboardRoute
  MatchHistoryRoute: typeof MatchHistoryRoute
  PricingRoute: typeof PricingRoute
  PrivacyRoute: typeof PrivacyRoute
  ProfileRoute: typeof ProfileRoute
  ReplayRoute: typeof ReplayRoute
  SettingsRoute: typeof SettingsRoute
  SpectateRoute: typeof SpectateRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spectate': {
      id: '/spectate'
      path: '/spectate'
      fullPath: '/spectate'
      preLoaderRoute: typeof SpectateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/replay': {
      id: '/replay'
      path: '/replay'
      fullPath: '/replay'
      preLoaderRoute: typeof ReplayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/match-history': {
      id: '/match-history'
      path: '/match-history'
      fullPath: '/match-history'
      preLoaderRoute: typeof MatchHistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai-game': {
      id: '/ai-game'
      path: '/ai-game'
      fullPath: '/ai-game'
      preLoaderRoute: typeof AiGameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/achievements': {
      id: '/achievements'
      path: '/achievements'
      fullPath: '/achievements'
      preLoaderRoute: typeof AchievementsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  AchievementsRoute: AchievementsRoute,
  AiGameRoute: AiGameRoute,
  AuthRoute: AuthRoute,
  GameRoute: GameRoute,
  LeaderboardRoute: LeaderboardRoute,
  MatchHistoryRoute: MatchHistoryRoute,
  PricingRoute: PricingRoute,
  PrivacyRoute: PrivacyRoute,
  ProfileRoute: ProfileRoute,
  ReplayRoute: ReplayRoute,
  SettingsRoute: SettingsRoute,
  SpectateRoute: SpectateRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
